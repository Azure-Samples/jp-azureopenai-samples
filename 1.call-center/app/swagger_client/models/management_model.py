# coding: utf-8

"""
    Speech to Text API v3.0

    Speech to Text API v3.0.  # noqa: E501

    OpenAPI spec version: v3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ManagementModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subscription_id': 'str',
        'kind': 'str',
        'acoustic_model': 'InternalModel',
        'language_model': 'InternalModel',
        'hide_on_v2_api': 'bool',
        'permissions': 'str',
        'internal_properties': 'ManagementModelProperties',
        'project': 'EntityReference',
        'links': 'ModelLinks',
        'properties': 'ModelProperties',
        '_self': 'str',
        'display_name': 'str',
        'description': 'str',
        'text': 'str',
        'base_model': 'EntityReference',
        'datasets': 'list[EntityReference]',
        'locale': 'str',
        'last_action_date_time': 'datetime',
        'status': 'str',
        'created_date_time': 'datetime',
        'custom_properties': 'dict(str, str)'
    }

    attribute_map = {
        'subscription_id': 'subscriptionId',
        'kind': 'kind',
        'acoustic_model': 'acousticModel',
        'language_model': 'languageModel',
        'hide_on_v2_api': 'hideOnV2Api',
        'permissions': 'permissions',
        'internal_properties': 'internalProperties',
        'project': 'project',
        'links': 'links',
        'properties': 'properties',
        '_self': 'self',
        'display_name': 'displayName',
        'description': 'description',
        'text': 'text',
        'base_model': 'baseModel',
        'datasets': 'datasets',
        'locale': 'locale',
        'last_action_date_time': 'lastActionDateTime',
        'status': 'status',
        'created_date_time': 'createdDateTime',
        'custom_properties': 'customProperties'
    }

    def __init__(self, subscription_id=None, kind=None, acoustic_model=None, language_model=None, hide_on_v2_api=None, permissions=None, internal_properties=None, project=None, links=None, properties=None, _self=None, display_name=None, description=None, text=None, base_model=None, datasets=None, locale=None, last_action_date_time=None, status=None, created_date_time=None, custom_properties=None, _configuration=None):  # noqa: E501
        """ManagementModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subscription_id = None
        self._kind = None
        self._acoustic_model = None
        self._language_model = None
        self._hide_on_v2_api = None
        self._permissions = None
        self._internal_properties = None
        self._project = None
        self._links = None
        self._properties = None
        self.__self = None
        self._display_name = None
        self._description = None
        self._text = None
        self._base_model = None
        self._datasets = None
        self._locale = None
        self._last_action_date_time = None
        self._status = None
        self._created_date_time = None
        self._custom_properties = None
        self.discriminator = None

        if subscription_id is not None:
            self.subscription_id = subscription_id
        if kind is not None:
            self.kind = kind
        if acoustic_model is not None:
            self.acoustic_model = acoustic_model
        if language_model is not None:
            self.language_model = language_model
        if hide_on_v2_api is not None:
            self.hide_on_v2_api = hide_on_v2_api
        if permissions is not None:
            self.permissions = permissions
        if internal_properties is not None:
            self.internal_properties = internal_properties
        if project is not None:
            self.project = project
        if links is not None:
            self.links = links
        if properties is not None:
            self.properties = properties
        if _self is not None:
            self._self = _self
        self.display_name = display_name
        if description is not None:
            self.description = description
        if text is not None:
            self.text = text
        if base_model is not None:
            self.base_model = base_model
        if datasets is not None:
            self.datasets = datasets
        self.locale = locale
        if last_action_date_time is not None:
            self.last_action_date_time = last_action_date_time
        if status is not None:
            self.status = status
        if created_date_time is not None:
            self.created_date_time = created_date_time
        if custom_properties is not None:
            self.custom_properties = custom_properties

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ManagementModel.  # noqa: E501


        :return: The subscription_id of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ManagementModel.


        :param subscription_id: The subscription_id of this ManagementModel.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def kind(self):
        """Gets the kind of this ManagementModel.  # noqa: E501


        :return: The kind of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ManagementModel.


        :param kind: The kind of this ManagementModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Acoustic", "Language", "AcousticAndLanguage", "CustomVoice", "Sentiment", "LanguageIdentification", "Diarization", "PronunciationScore"]  # noqa: E501
        if (self._configuration.client_side_validation and
                kind not in allowed_values):
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"  # noqa: E501
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def acoustic_model(self):
        """Gets the acoustic_model of this ManagementModel.  # noqa: E501


        :return: The acoustic_model of this ManagementModel.  # noqa: E501
        :rtype: InternalModel
        """
        return self._acoustic_model

    @acoustic_model.setter
    def acoustic_model(self, acoustic_model):
        """Sets the acoustic_model of this ManagementModel.


        :param acoustic_model: The acoustic_model of this ManagementModel.  # noqa: E501
        :type: InternalModel
        """

        self._acoustic_model = acoustic_model

    @property
    def language_model(self):
        """Gets the language_model of this ManagementModel.  # noqa: E501


        :return: The language_model of this ManagementModel.  # noqa: E501
        :rtype: InternalModel
        """
        return self._language_model

    @language_model.setter
    def language_model(self, language_model):
        """Sets the language_model of this ManagementModel.


        :param language_model: The language_model of this ManagementModel.  # noqa: E501
        :type: InternalModel
        """

        self._language_model = language_model

    @property
    def hide_on_v2_api(self):
        """Gets the hide_on_v2_api of this ManagementModel.  # noqa: E501


        :return: The hide_on_v2_api of this ManagementModel.  # noqa: E501
        :rtype: bool
        """
        return self._hide_on_v2_api

    @hide_on_v2_api.setter
    def hide_on_v2_api(self, hide_on_v2_api):
        """Sets the hide_on_v2_api of this ManagementModel.


        :param hide_on_v2_api: The hide_on_v2_api of this ManagementModel.  # noqa: E501
        :type: bool
        """

        self._hide_on_v2_api = hide_on_v2_api

    @property
    def permissions(self):
        """Gets the permissions of this ManagementModel.  # noqa: E501


        :return: The permissions of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this ManagementModel.


        :param permissions: The permissions of this ManagementModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "OthersWrite", "OthersRead", "GroupWrite", "GroupRead", "UserWrite", "UserRead"]  # noqa: E501
        if (self._configuration.client_side_validation and
                permissions not in allowed_values):
            raise ValueError(
                "Invalid value for `permissions` ({0}), must be one of {1}"  # noqa: E501
                .format(permissions, allowed_values)
            )

        self._permissions = permissions

    @property
    def internal_properties(self):
        """Gets the internal_properties of this ManagementModel.  # noqa: E501


        :return: The internal_properties of this ManagementModel.  # noqa: E501
        :rtype: ManagementModelProperties
        """
        return self._internal_properties

    @internal_properties.setter
    def internal_properties(self, internal_properties):
        """Sets the internal_properties of this ManagementModel.


        :param internal_properties: The internal_properties of this ManagementModel.  # noqa: E501
        :type: ManagementModelProperties
        """

        self._internal_properties = internal_properties

    @property
    def project(self):
        """Gets the project of this ManagementModel.  # noqa: E501

        The project, the model is associated with.  # noqa: E501

        :return: The project of this ManagementModel.  # noqa: E501
        :rtype: EntityReference
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ManagementModel.

        The project, the model is associated with.  # noqa: E501

        :param project: The project of this ManagementModel.  # noqa: E501
        :type: EntityReference
        """

        self._project = project

    @property
    def links(self):
        """Gets the links of this ManagementModel.  # noqa: E501

        The links for additional actions or content related to this model.  # noqa: E501

        :return: The links of this ManagementModel.  # noqa: E501
        :rtype: ModelLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ManagementModel.

        The links for additional actions or content related to this model.  # noqa: E501

        :param links: The links of this ManagementModel.  # noqa: E501
        :type: ModelLinks
        """

        self._links = links

    @property
    def properties(self):
        """Gets the properties of this ManagementModel.  # noqa: E501

        Additional configuration options when creating a new model and additional metadata provided by the service.  # noqa: E501

        :return: The properties of this ManagementModel.  # noqa: E501
        :rtype: ModelProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ManagementModel.

        Additional configuration options when creating a new model and additional metadata provided by the service.  # noqa: E501

        :param properties: The properties of this ManagementModel.  # noqa: E501
        :type: ModelProperties
        """

        self._properties = properties

    @property
    def _self(self):
        """Gets the _self of this ManagementModel.  # noqa: E501

        The location of this entity.  # noqa: E501

        :return: The _self of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this ManagementModel.

        The location of this entity.  # noqa: E501

        :param _self: The _self of this ManagementModel.  # noqa: E501
        :type: str
        """

        self.__self = _self

    @property
    def display_name(self):
        """Gets the display_name of this ManagementModel.  # noqa: E501

        The display name of the object.  # noqa: E501

        :return: The display_name of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ManagementModel.

        The display name of the object.  # noqa: E501

        :param display_name: The display_name of this ManagementModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ManagementModel.  # noqa: E501

        The description of the object.  # noqa: E501

        :return: The description of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ManagementModel.

        The description of the object.  # noqa: E501

        :param description: The description of this ManagementModel.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def text(self):
        """Gets the text of this ManagementModel.  # noqa: E501

        The text used to adapt this language model.  # noqa: E501

        :return: The text of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ManagementModel.

        The text used to adapt this language model.  # noqa: E501

        :param text: The text of this ManagementModel.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def base_model(self):
        """Gets the base_model of this ManagementModel.  # noqa: E501

        The base model used for adaptation.  # noqa: E501

        :return: The base_model of this ManagementModel.  # noqa: E501
        :rtype: EntityReference
        """
        return self._base_model

    @base_model.setter
    def base_model(self, base_model):
        """Sets the base_model of this ManagementModel.

        The base model used for adaptation.  # noqa: E501

        :param base_model: The base_model of this ManagementModel.  # noqa: E501
        :type: EntityReference
        """

        self._base_model = base_model

    @property
    def datasets(self):
        """Gets the datasets of this ManagementModel.  # noqa: E501

        Datasets used for adaptation.  # noqa: E501

        :return: The datasets of this ManagementModel.  # noqa: E501
        :rtype: list[EntityReference]
        """
        return self._datasets

    @datasets.setter
    def datasets(self, datasets):
        """Sets the datasets of this ManagementModel.

        Datasets used for adaptation.  # noqa: E501

        :param datasets: The datasets of this ManagementModel.  # noqa: E501
        :type: list[EntityReference]
        """

        self._datasets = datasets

    @property
    def locale(self):
        """Gets the locale of this ManagementModel.  # noqa: E501

        The locale of the contained data.  # noqa: E501

        :return: The locale of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this ManagementModel.

        The locale of the contained data.  # noqa: E501

        :param locale: The locale of this ManagementModel.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def last_action_date_time(self):
        """Gets the last_action_date_time of this ManagementModel.  # noqa: E501

        The time-stamp when the current status was entered.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).  # noqa: E501

        :return: The last_action_date_time of this ManagementModel.  # noqa: E501
        :rtype: datetime
        """
        return self._last_action_date_time

    @last_action_date_time.setter
    def last_action_date_time(self, last_action_date_time):
        """Sets the last_action_date_time of this ManagementModel.

        The time-stamp when the current status was entered.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).  # noqa: E501

        :param last_action_date_time: The last_action_date_time of this ManagementModel.  # noqa: E501
        :type: datetime
        """

        self._last_action_date_time = last_action_date_time

    @property
    def status(self):
        """Gets the status of this ManagementModel.  # noqa: E501

        The status of the object.  # noqa: E501

        :return: The status of this ManagementModel.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ManagementModel.

        The status of the object.  # noqa: E501

        :param status: The status of this ManagementModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotStarted", "Running", "Succeeded", "Failed"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def created_date_time(self):
        """Gets the created_date_time of this ManagementModel.  # noqa: E501

        The time-stamp when the object was created.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).  # noqa: E501

        :return: The created_date_time of this ManagementModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_date_time

    @created_date_time.setter
    def created_date_time(self, created_date_time):
        """Sets the created_date_time of this ManagementModel.

        The time-stamp when the object was created.  The time stamp is encoded as ISO 8601 date and time format  (\"YYYY-MM-DDThh:mm:ssZ\", see https://en.wikipedia.org/wiki/ISO_8601#Combined_date_and_time_representations).  # noqa: E501

        :param created_date_time: The created_date_time of this ManagementModel.  # noqa: E501
        :type: datetime
        """

        self._created_date_time = created_date_time

    @property
    def custom_properties(self):
        """Gets the custom_properties of this ManagementModel.  # noqa: E501

        The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum  allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :return: The custom_properties of this ManagementModel.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this ManagementModel.

        The custom properties of this entity. The maximum allowed key length is 64 characters, the maximum  allowed value length is 256 characters and the count of allowed entries is 10.  # noqa: E501

        :param custom_properties: The custom_properties of this ManagementModel.  # noqa: E501
        :type: dict(str, str)
        """

        self._custom_properties = custom_properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ManagementModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ManagementModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ManagementModel):
            return True

        return self.to_dict() != other.to_dict()
